/*
 * main.c
 *
 *  Created on: Nov 17, 2013
 *      Author: lundburgerr
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "main.h"



//Max opcode 0x38 -> not bad
//Array of structs that contain necessary info about opcode like format etc.
//It also contains another array of structs with function information if it's R
//If it's I or J it contains pointer to a struct (not array) this struct contains name etc.


unsigned int getop(unsigned int inst);
unsigned int getrs(unsigned int instruction, char *regName);
unsigned int getrt(unsigned int instruction, char *regName);
unsigned int getrd(unsigned int instruction, char *regName);
unsigned int getimm(unsigned int instruction, char *regName);
unsigned int getshamt(unsigned int instruction, char *regName);
unsigned int getaddress(unsigned int instruction, char *regName);
void strrep(char *out, const char *old, const char *new);
void printOperation(unsigned int instruction);
struct funccode_t * getfunc(struct opcode_t *op, unsigned int instruction);

int main(int argc, char *argv[]){
	FILE *file;
	char line[256];
	unsigned int instruction;

	file = fopen("machinecode.txt", "r");
	while (fgets(line, sizeof(line), file ) != NULL ){
		instruction = strtol(line, NULL, 0);
		printOperation(instruction);
	}
	return EXIT_SUCCESS;
}

unsigned int getop(unsigned int inst){
	return inst>>26;
}

void printOperation(unsigned int instruction){
	unsigned int opcode;
	struct opcode_t *op;
	struct funccode_t *func;
	char regName[6];
	unsigned int rs;
	unsigned int rd;
	unsigned int rt;
	unsigned int imm;
	unsigned int shamt;
	unsigned int address;

	opcode = getop(instruction);
	if(opcode > MAXOP){
		printf("%u; %s; %s\n", instruction, NO_INSTRUCTION, "invalid opcode.");
		return;
	}
	op = &operations[opcode];
	if(op->type == INVALIDOP){
		printf("%u; %s; %s\n", instruction, NO_INSTRUCTION, "invalid opcode.");
		return;
	}
	func = getfunc(op, instruction);
	if(func == NULL){
		printf("%u; %s; %s\n", instruction, NO_INSTRUCTION, "invalid function code.");
		return;
	}
	char out[128];
	strcpy(out, func->name);

	switch(op->type){
		case(R):
			rs = getrs(instruction, regName);

			strrep(out, "%rs%", regName);

			rd = getrd(instruction, regName);
			strrep(out, "%rd%", regName);

			rt = getrt(instruction, regName);
			strrep(out, "%rt%", regName);

			shamt = getshamt(instruction, regName);
			strrep(out, "%shamt%", regName);

			printf("%u; R; ", instruction);
			printf("%u %u %u %u %u %u; ", op->opnum, rs, rd, rt, shamt, func->funcnum);
			printf("0x%x 0x%x 0x%x 0x%x 0x%x 0x%x; ", op->opnum, rs, rd, rt, shamt, func->funcnum);
			break;
		case(I):
			rs = getrs(instruction, regName);
			strrep(out, "%rs%", regName);

			rt = getrt(instruction, regName);
			strrep(out, "%rt%", regName);

			imm = getimm(instruction);
			sprintf(regName, "%u", imm);
			strrep(out, "%imm%", regName);

			printf("%u; I; ", instruction);
			printf("%u %u %u %u %u; ", op->opnum, rs, rt, imm, func->funcnum);
			printf("0x%x 0x%x 0x%x 0x%x 0x%x; ", op->opnum, rs, rt, imm, func->funcnum);
			break;
		case(J):
			address = getaddress(instruction);
			sprintf(regName, "%u", address);
			strrep(out, "%address%", regName);

			printf("%u; J; ", instruction);
			printf("%u %u %u; ", op->opnum, address, func->funcnum);
			printf("0x%x 0x%x 0x%x; ", op->opnum, address, func->funcnum);
			break;
		default:
			printf("Should never reach this, the programmer sucks!");
			exit(EXIT_FAILURE);
	}
	printf("%s\n", out);
}

void strrep(char *str, const char *orig, const char *rep){
	char buffer[256];
	char *p;

	if(!(p = strstr(str, orig)))  // Is 'orig' even in 'str'?
		return;

	strncpy(buffer, str, p-str); // Copy characters from 'str' start to 'orig' st$
	buffer[p-str] = '\0';

	sprintf(buffer+(p-str), "%s%s", rep, p+strlen(orig));

	strcpy(str, buffer); //TODO: Why do I have an error here?
}

struct funccode_t * getfunc(struct opcode_t *op, unsigned int instruction){
	struct funccode_t *func;
	unsigned int funccode;

	if(op->funcstart == 0){
		func = op->func;
	}
	else{
		funccode = instruction << (32-op->funcstart);
		funccode >>= 26;
		if(funccode > op->maxfunc)
			func = NULL;
		else
			func = &op->func[funccode];
	}
	if(func->funcnum == INVALIDFUNC){
		func = NULL;
	}
	return func;
}

unsigned int getrs(unsigned int instruction, char *regName){
	unsigned int rs;
	rs = instruction << 6;
	rs >>= 27;
	strcpy(regName, registers[rs]);
	return rs;
}

unsigned int getrt(unsigned int instruction, char *regName){
	unsigned int rt;
	rt = instruction << 11;
	rt >>= 27;
	strcpy(regName, registers[rt]);
	return rt;
}

unsigned int getrd(unsigned int instruction, char *regName){
	unsigned int rd;
	rd = instruction << 16;
	rd >>= 27;
	strcpy(regName, registers[rd]);
	return rd;
}

unsigned int getshamt(unsigned int instruction, char *regName){
	unsigned int shamt;
	shamt = instruction << 21;
	shamt >>= 27;
	strcpy(regName, registers[shamt]);
	return shamt;
}

unsigned int getimm(unsigned int instruction){
	unsigned int imm;
	imm = instruction << 16;
	imm >>= 16;
//	strcpy(regName, registers[imm]);
	return imm;
}

unsigned int getaddress(unsigned int instruction){
	unsigned int address;
	address = instruction << 6;
	address >>= 6;
//	strcpy(regName, registers[address]);
	return address;
}
