var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Mmu = xdc.useModule('ti.sysbios.family.arm.arm9.Mmu');
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
var Cache = xdc.useModule('xdc.runtime.knl.Cache');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
MultiProc.numProcessors = 2;
MultiProc.setConfig("HOST", ["HOST", "DSP"]);
/* Load the common configuration */
//xdc.loadCapsule("app_common.cfg.xs");
var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
var HeapBufMP = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
HeapBufMP.maxRuntimeEntries = 32;

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x10000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

var execontextInstance0 = xdc.lookup('xdc.platform.ExeContext.Instance#0');
execontextInstance0.memoryMap["DDR"].base = 3221225472;
var task0Params = new Task.Params();
task0Params.instance.name = "task0";
Program.global.task0 = Task.create("&maintenanceTask", task0Params);

var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "EDMA";
hwi0Params.maskSetting = xdc.module("ti.sysbios.interfaces.IHwi").MaskingOption_SELF;
Program.global.EDMA = Hwi.create(11, "&Edma3ComplHandler0Isr", hwi0Params);

var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "EDMA_ERR";
hwi1Params.maskSetting = xdc.module("ti.sysbios.interfaces.IHwi").MaskingOption_SELF;
Program.global.EDMA_ERR = Hwi.create(12, "&Edma3CCErrHandler0Isr", hwi1Params);


// Force peripheral section to be NON cacheable 
 var peripheralAttrs = { type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor 
 bufferable : false, // bufferable 
 cacheable : false, // cacheable 
 };

 // Define the base address of the 1 Meg page 
 // the peripheral resides in.  
 var peripheralBaseAddr = 0x01d0d000; /* replace with the 1 meg page address of your peripheral */  

 // Configure the corresponding MMU page descriptor accordingly 
 Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs); 
 
var peripheralBaseAddr = 0x01d0d000; 

 var peripheralBaseAddr = 0x01e00000;
 Mmu.setFirstLevelDescMeta(peripheralBaseAddr, peripheralBaseAddr, peripheralAttrs); 

/* Trace SWI */ 
var swi0Params = new Swi.Params();
swi0Params.instance.name = "trace_flush_swi_hdl";
swi0Params.priority = 1;
swi0Params.trigger = 1;
Program.global.trace_flush_swi_hdl = Swi.create("&trace_flush_swi", swi0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "traceSem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.traceSem = Semaphore.create(0, semaphore0Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "Uart2";
Program.global.Uart2 = Hwi.create(61, "&UARTIsr", hwi2Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "spi1Sem";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.spi1Sem = Semaphore.create(1, semaphore1Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "GPIOB4";
Program.global.GPIOB4 = Hwi.create(46, "&dio_IRSB4", hwi3Params);
Clock.timerId = -1;




/* Synchronize all processors (this will be done in Ipc_start) */

Ipc.procSync = Ipc.ProcSync_PAIR;

/* Shared Memory Map */

var SHAREDMEM           = 0xC2000000;
var SHAREDMEMSIZE       = 0x00020000;

/* 
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */ 

var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM, 
      len:  SHAREDMEMSIZE,
      ownerProcId: 0,
      isValid: true,
      name: "shared_mem",
    });


    
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "i2cSem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.i2cSem = Semaphore.create(1, semaphore2Params);
var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "I2C";
Program.global.I2C = Hwi.create(15, "&I2CIsr", hwi4Params);


xdc.loadCapsule("phy_arm.cfg.xs")